/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        gresc: grave_escape {
            label = "GRAVE_ESCAPE";
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp ESC>, <&kp GRAVE>;
            mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
        };
    };

    macros {
        kvm_s1: kvm_s1 {
            label = "kvm_s1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <30>;
            bindings = <&macro_tap_time 150>, <&macro_tap &kp SLCK &kp SLCK &kp KP_N1>;
        };
        kvm_s2: kvm_s2 {
            label = "kvm_s2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <30>;
            bindings = <&macro_tap_time 125>, <&macro_tap &kp SLCK &kp SLCK &kp KP_N2>;
        };
        kvm_s3: kvm_s3 {
            label = "kvm_s3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <30>;
            bindings = <&macro_tap_time 75>, <&macro_tap &kp SLCK &kp SLCK &kp KP_N3>;
        };
        kvm_s4: kvm_s4 {
            label = "kvm_s4";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <30>;
            bindings = <&macro_tap_time 50>, <&macro_tap &kp SLCK &kp SLCK &kp KP_N4>;
        };
        bt_s0: bt_s0 {
            label = "bt_s0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap &out OUT_BLE &bt BT_SEL 0>;
        };
        bt_s1: bt_s1 {
            label = "bt_s1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap &out OUT_BLE &bt BT_SEL 1>;
        };
        bt_s2: bt_s2 {
            label = "bt_s2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap &out OUT_BLE &bt BT_SEL 2>;
        };
        bt_s3: bt_s3 {
            label = "bt_s3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap &out OUT_BLE &bt BT_SEL 3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

// ----------------------------------------------      -----------------------------------------------------
// | GESC |  1   |  2  |  3   |  4  |  5  |  6  |      |  7  |  8  |  9  |  0  |  -  |  =  |  BKSPC |
// | TAB   |  Q   |  W  |  E   |  R  |  T  |        |  Y  |  U  |  I  |  O  |  P  |  [  |  ]  |  \  |
// | ESC    |  A   |  S  |  D   |  F  |  G  |        |  H  |  J  |  K  |  L  |  ;  |  '  |   ENTER  |
// | SHIFT   |  Z   |  X  |  C  |  V   |  B  |        |  N  |  M  |  ,  |  .  |  /   |    RSHFT     |
// | LALT  | LGUI | LCTRL |   SPACE   | FN2  |        |    SPACE  |  FN  | RALT | RGUI | RCTRL |
// -------------------------------------------        ------------------------------------------------------

        default_layer {
            bindings = <
    &gresc   &kp N1   &kp N2   &kp N3   &kp N4   &kp N5  &kp N6 /**/   &kp N7    &kp N8   &kp N9    &kp N0    &kp MINUS &kp EQUAL &kp BSPC
    &kp TAB    &kp Q    &kp W    &kp E    &kp R    &kp T        /**/ &kp Y     &kp U    &kp I     &kp O     &kp P     &kp LBKT  &kp RBKT &kp BSPC
    &kp ESC     &kp A    &kp S    &kp D    &kp F  &kp G         /**/  &kp H     &kp J    &kp K     &kp L     &kp SEMI  &kp SQT   &kp RET
    &kp LSHFT     &kp Z    &kp X    &kp C    &kp V  &kp B       /**/    &kp N     &kp M    &kp COMMA &kp DOT   &kp FSLH  &kp RSHFT
    &kp LALT    &kp LGUI  &kp LCTRL      &kp SPACE     &mo 2    /**/ &kp SPACE &mo 1    &kp RALT  &kp K_APP  &kp RCTRL
            >;
        };


        fn_layer {
            bindings = <
    &trans     &kp F1     &kp F2   &kp F3    &kp F4   &kp F5    &kp F6   /**/   &kp F7   &kp F8   &kp F9   &kp F10   &kp F11 &kp F12     &kp DEL
    &trans      &kp EXCL   &kp N1   &kp N2    &kp N3   &kp PRCNT         /**/ &kp AMPS  &kp STAR &kp LPAR &kp RPAR  &kp PLUS  &kp BSLH  &kp PIPE  &trans
    &trans       &kp N0     &kp N4   &kp N5    &kp N6   &kp DLLR         /**/  &kp LEFT  &kp DOWN &kp UP   &kp RIGHT &kp CARET  &kp GRAVE  &trans
    &trans         &kp AT     &kp N7   &kp N8    &kp N9   &kp HASH       /**/    &kp UNDER &kp MINUS &kp EQUAL &trans  &trans  &kp PG_UP
    &kp HOME          &kp END     &trans             &trans      &trans  /**/    &trans        &trans &trans &trans  &kp PG_DN
            >;
        };

        kbd_func_layer {
            bindings = <
    &bt BT_CLR &bt_s0       &bt_s1       &bt_s2       &bt_s3       &out OUT_BLE &out OUT_USB /**/   &kp KP_N7 &kp KP_N8 &kp KP_N9 &kp KP_N0  &trans  &trans  &trans
    &trans      &kp F1   &kp F2     &kp F3       &kp F4       &kp DEL                        /**/ &trans &kp KP_N4 &kp KP_N5 &kp KP_N6  &trans  &trans  &trans &trans
    &kp SLCK      &kp F5       &kp F6       &kp F7       &kp F8    &kp RET                   /**/  &trans &kp KP_N1 &kp KP_N2 &kp KP_N3  &trans  &trans  &trans
    &trans           &kp F9       &kp F10     &kp F11      &kp F12    &kp BSPC               /**/     &kp KP_NUM &trans &trans &trans  &trans  &trans
    &mo 3             &trans         &trans           &trans              &trans             /**/    &trans        &trans &trans &trans  &trans
            >;
        };

//         kbd_func_layer {
//             bindings = <
//     &bt BT_CLR &bt_s0       &bt_s1       &bt_s2       &bt_s3       &out OUT_BLE &out OUT_USB /**/   &kp KP_N7 &kp KP_N8 &kp KP_N9 &kp KP_N0  &trans  &trans  &trans
//     &trans      &kp PG_UP &kp HOME   &kp UP      &kp END      &kp DEL                        /**/ &trans &kp KP_N4 &kp KP_N5 &kp KP_N6  &trans  &trans  &trans &trans
//     &kp SLCK      &kp PG_DOWN  &kp LEFT     &kp DOWN     &kp RIGHT &kp RET                   /**/  &trans &kp KP_N1 &kp KP_N2 &kp KP_N3  &trans  &trans  &trans
//     &trans           &trans       &trans      &trans       &trans     &kp BSPC               /**/     &kp KP_NUM &trans &trans &trans  &trans  &trans
//     &mo 3             &trans         &trans           &trans              &trans             /**/    &trans        &trans &trans &trans  &trans
//             >;
//         };

        rgb_func_layer {
            bindings = <
    &rgb_ug RGB_TOG &rgb_ug RGB_HUI  &rgb_ug RGB_HUD &rgb_ug RGB_SAI &rgb_ug RGB_SAD &rgb_ug RGB_BRI &rgb_ug RGB_BRD  /**/   &trans    &trans    &trans    &trans     &trans  &trans  &trans
    &rgb_ug RGB_EFF &trans   &trans     &trans       &trans       &trans                                              /**/ &trans &trans    &trans    &trans     &trans  &trans  &trans &trans
    &trans        &trans       &trans       &trans       &trans    &trans                                             /**/  &trans &trans    &trans    &trans     &trans  &trans  &trans
    &trans         &trans     &trans      &trans       &trans     &trans                                              /**/     &trans     &trans &trans &trans  &trans  &trans
    &trans            &trans         &trans           &trans              &trans                                      /**/    &trans        &trans &trans &trans  &trans
            >;
        };
    };
};

//// / {
////     keymap {
////         compatible = "zmk,keymap";
////
//// // ----------------------------------------------      -----------------------------------------------------
//// // | ESC  |  1   |  2  |  3   |  4  |  5  |  6  |      |  7  |  8  |  9  |  0  |  -  |  =  |  BKSPC |
//// // | TAB   |  Q   |  W  |  E   |  R  |  T  |        |  Y  |  U  |  I  |  O  |  P  |  [  |  ]  |  \  |
//// // | LCTRL  |  A   |  S  |  D   |  F  |  G  |        |  H  |  J  |  K  |  L  |  ;  |  '  |   ENTER  |
//// // | SHIFT   |  Z   |  X  |  C  |  V   |  B  |        |  N  |  M  |  ,  |  .  |  /  |    RSHFT
//// // | LCTRL   | LGUI | LALT |   SPACE   | FN  |        |    SPACE    | FN | RALT | RCTRL | LFT |
//// // -------------------------------------------        ------------------------------------------------------
////
////         default_layer {
////             bindings = <
////     &kp ESC   &kp N1   &kp N2   &kp N3   &kp N4 &kp N5 &kp N6 /**/   &kp N7    &kp N8   &kp N9    &kp N0    &kp MINUS &kp EQUAL &kp BSPC
////     &kp TAB    &kp Q    &kp W    &kp E    &kp R  &kp T        /**/ &kp Y     &kp U    &kp I     &kp O     &kp P     &kp LBKT  &kp RBKT &kp BSLH
////     &kp LCTRL   &kp A    &kp S    &kp D    &kp F  &kp G       /**/  &kp H     &kp J    &kp K     &kp L     &kp SEMI  &kp SQT   &kp RET
////     &kp LSHFT     &kp Z    &kp X    &kp C    &kp V  &kp B     /**/    &kp N     &kp M    &kp COMMA &kp DOT   &kp FSLH  &kp RSHFT
////     &kp LCTRL    &kp LGUI &kp LALT      &kp SPACE     &mo 1   /**/ &kp SPACE &mo 1    &kp RALT  &kp RGUI  &kp RCTRL
////             >;
////         };
////
//// // ----------------------------------------------     -----------------------------------------------------
//// // |BT_CLR|  F1  |  F2 |  F3  |  F4 |  F5 |  F6 |     |  F7 |  F8 |  F9 | F10 | F11 | F12 |        |BT_CLR|
//// // |       | BT-0 | BT-1| BT-2 |     |     |       |     |     |     |     |     |     |     |     |      |
//// // |        |      |     |      |     |     |       |     |     |     |     |     |     |          |      |
//// // |         |      |     |     |      |     |       |     |     |     |     |     |         |     |      |
//// // |         |      |      |           |     |       |             |      |    |       |     |     |      |
//// // -------------------------------------------       ------------------------------------------------------
////
////         fn_layer {
////             bindings = <
////     &bt BT_CLR &kp F1       &kp F2       &kp F3       &kp F4 &kp F5 &kp F6  /**/   &kp F7 &kp F8 &kp F9 &kp F10 &kp F11 &kp F12 &trans
////     &trans      &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &trans    &trans     /**/ &trans &trans &trans &trans  &trans  &trans  &trans &trans
////     &trans       &trans       &trans       &trans       &trans    &trans    /**/  &trans &trans &trans &trans  &trans  &trans  &trans
////     &trans         &trans       &trans       &trans       &trans     &trans /**/     &trans &trans &trans &trans  &trans  &trans
////     &trans          &tran       &trans           &trans              &trans /**/    &trans        &trans &trans &trans  &trans
////             >;
////         };
////     };
//// };

// /*
//  * Copyright (c) 2020 The ZMK Contributors
//  *
//  * SPDX-License-Identifier: MIT
//  */

// #include <behaviors.dtsi>
// #include <dt-bindings/zmk/bt.h>
// #include <dt-bindings/zmk/outputs.h>
// #include <dt-bindings/zmk/keys.h>
//
// / {
//     behaviors {
//         gresc: grave_escape {
//             compatible = "zmk,behavior-mod-morph";
//             label = "GRAVE_ESCAPE";
//             #binding-cells = <0>;
//             bindings = <&kp ESC>, <&kp GRAVE>;
//             mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
//         };
//     };
//     macros {
//         bt_s0: bt_s0 {
//             label = "bt_s0";
//             compatible = "zmk,behavior-macro";
//             #binding-cells = <0>;
//             bindings = <&macro_tap &out OUT_BLE &bt BT_SEL 0>;
//         };
//         bt_s1: bt_s1 {
//             label = "bt_s1";
//             compatible = "zmk,behavior-macro";
//             #binding-cells = <0>;
//             bindings = <&macro_tap &out OUT_BLE &bt BT_SEL 1>;
//         };
//         bt_s2: bt_s2 {
//             label = "bt_s2";
//             compatible = "zmk,behavior-macro";
//             #binding-cells = <0>;
//             bindings = <&macro_tap &out OUT_BLE &bt BT_SEL 2>;
//         };
//         bt_s3: bt_s3 {
//             label = "bt_s3";
//             compatible = "zmk,behavior-macro";
//             #binding-cells = <0>;
//             bindings = <&macro_tap &out OUT_BLE &bt BT_SEL 3>;
//         };
//     };
//     keymap {
//         compatible = "zmk,keymap";
//
// // ----------------------------------------------      -----------------------------------------------------
// // | ESC  |  1   |  2  |  3   |  4  |  5  |  6  |      |  7  |  8  |  9  |  0  |  -  |  =  | BKSPC |
// // | TAB   |  Q   |  W  |  E   |  R  |  T  |        |  Y  |  U  |  I  |  O  |  P  |  [  |  ]  |  \ |
// // | LCTRL  |  A   |  S  |  D   |  F  |  G  |        |  H  |  J  |  K  |  L  |  ;  |  '  |   ENTER |
// // | SHIFT   |  Z   |  X  |  C   |  V   |  B  |        |  N  |  M  |  ,  |  .  |  /   |    RSHFT   |
// //   | LCTL | LGUI | LALT |    SPACE    | FN2 |        |   SPACE   |  FN  | RALT | MENU | RCTL |
// // -------------------------------------------        ------------------------------------------------------
//
//         default_layer {
//             bindings = <
//     &gresc   &kp N1   &kp N2   &kp N3   &kp N4 &kp N5 &kp N6 /**/   &kp N7    &kp N8   &kp N9    &kp N0    &kp MINUS &kp EQUAL &kp BSPC
//     &kp TAB    &kp Q    &kp W    &kp E    &kp R  &kp T        /**/ &kp Y     &kp U    &kp I     &kp O     &kp P     &kp LBKT  &kp RBKT &kp BSLH
//     &kp CAPS   &kp A    &kp S    &kp D    &kp F  &kp G         /**/  &kp H     &kp J    &kp K     &kp L     &kp SEMI  &kp SQT   &kp RET
//     &kp LSHFT     &kp Z    &kp X    &kp C    &kp V  &kp B     /**/    &kp N     &kp M    &kp COMMA &kp DOT   &kp FSLH  &kp RSHFT
//     &kp LCTRL    &kp LGUI  &kp LALT      &kp SPACE     &mo 2  /**/ &kp SPACE           &mo 1    &kp RALT  &kp K_APP  &kp RCTRL
//             >;
//         };
//
//
//         fn_layer {
//             bindings = <
//     &trans     &kp F1     &kp F2   &kp F3    &kp F4   &kp F5    &kp F6   /**/   &kp F7   &kp F8   &kp F9   &kp F10   &kp F11 &kp F12     &kp DEL
//     &trans      &trans     &kp N1   &kp N2    &kp N3   &trans            /**/ &trans    &kp HOME &kp UP &kp END  &kp PG_UP  &trans  &trans  &trans
//     &trans       &kp N0     &kp N4   &kp N5    &kp N6   &trans           /**/  &trans    &kp LEFT &kp DOWN   &kp RIGHT &kp PG_DN  &kp GRAVE  &trans
//     &trans         &trans     &kp N7   &kp N8    &kp N9   &trans         /**/    &trans   &trans   &trans    &trans     &trans     &trans
//     &trans            &trans      &trans             &trans      &trans  /**/    &trans        &trans &trans   &trans  &kp INS
//             >;
//         };
//
//         kbd_func_layer {
//             bindings = <
//     &bt BT_CLR &bt_s0       &bt_s1       &bt_s2       &bt_s3       &out OUT_BLE &out OUT_USB /**/   &kp KP_N7 &kp KP_N8 &kp KP_N9 &kp KP_N0  &trans  &trans  &trans
//     &kp SLCK    &kp F1   &kp F2     &kp F3       &kp F4       &kp DEL                       /**/ &trans &kp KP_N4 &kp KP_N5 &kp KP_N6  &trans  &trans  &trans &trans
//     &kp KP_NUM    &kp F5       &kp F6       &kp F7       &kp F8    &kp RET                   /**/  &trans &kp KP_N1 &kp KP_N2 &kp KP_N3  &trans  &trans  &trans
//     &trans           &kp F9       &kp F10     &kp F11      &kp F12    &kp BSPC               /**/     &trans &trans &trans &trans  &trans  &trans
//     &trans            &trans         &trans           &trans              &trans             /**/    &trans        &trans &trans &trans  &trans
//             >;
//         };
//     };
// };

//     kbd_func_layer_fkeys {
//         bindings = <
// &bt BT_CLR &bt_s0       &bt_s1       &bt_s2       &bt_s3       &out OUT_BLE &out OUT_USB /**/   &kp F7 &kp F8 &kp F9 &kp F10 &kp F11 &kp F12 &trans
// &kp CAPS    &kp F1   &kp F2     &kp F3       &kp F4       &kp DEL                       /**/ &trans &trans &trans &trans  &trans  &trans  &trans &trans
// &trans        &kp F5       &kp F6       &kp F7       &kp F8    &kp RET                   /**/  &trans &trans &trans &trans  &trans  &trans  &trans
// &kp SLCK         &kp F9       &kp F10     &kp F11      &kp F12    &kp BSPC               /**/     &trans &trans &trans &trans  &trans  &trans
// &trans            &trans         &trans           &trans              &trans             /**/    &trans        &trans &trans &trans  &trans
//         >;
//     };
